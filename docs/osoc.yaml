openapi: 3.0.0
info:
    version: '1.0.0'
    title: 'OSOC'
    license:
        name: MIT
servers:
  - url: 'localhost:3000'
paths:
    /students:
        get:
            summary: Get a list containing all Student objects
            description: Get a list of all students in the database. This request cannot fail.
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Student'
        post:
            summary: Add a new student to the database
            description: |
                Add a student to the database.
                The id for this student chosen by the database is returned.
                Note that no checking is done to see if firstName or lastName qualify as valid 'names',
                this verification is the responsibility of the caller.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Student'
            responses:
                '201':
                    description: successful operation, returns the assigned id of the newly added student.
                    content:
                        application/json:
                            schema:
                                type: string
                                format: uuid

    /students/{studentId}:
        get:
            summary: Get Student by id
            description: |
                Returns the student with the corresponding id. If no such student exists,
                returns a "404: Not Found" message instead.
            parameters:
              - name: studentId
                required: true
                in: path
                schema:
                    type: integer
                    format: int64
            responses:
                '200':
                    description: |
                        The response if there is a student in the database with the given id.
                        Returns the student in the response body.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Student'
                '404':
                    description: |
                        The response if there is no student in the database with the given id.
        delete:
            summary: Delete Student by id
            description: |
                Deletes the student with the corresponding id. If no such student exists,
                returns a "404: Not Found" message instead.
            parameters:
              - name: studentId
                required: true
                in: path
                schema:
                    type: integer
                    format: int64
            responses:
                '204':
                    description: |
                        The response if there was a student in the database with the given id.
                '404':
                    description: |
                        The response if there is no student in the database with the given id.
    /students/{studentId}/suggestions:
        post:
            summary: Suggest student status
            description: |
                Add a statusSuggestion to the student with the given id. If no such student exists,
                returns a "404: Not Found" message instead. 
                Note that the status value can only be "Yes", "Maybe" or "No" (this is case-sensitive).
                Any other value will result in a "400: Bad Request" response.
                Importantly this includes the "Undecided" value. This is because it's not allowed
                to suggest to change a student's status to Undecided.
            parameters:
              - name: studentId
                required: true
                in: path
                schema:
                    type: integer
                    format: int64
            responses:
                '204':
                    description: |
                        The response if there is a student in the database with the given id.
                '404':
                    description: |
                        The response if there is no student in the database with the given id.      
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/StatusSuggestion"
    /students/{studentId}/status:
        post:
            summary: Set student status
            description: |
                Set the status of the student with the given id. If no such student exists,
                returns a "404: Not Found" message instead. 
                The status should be passed in the request body as a JSON string 
                and can have the following values:  
                "Yes", "Maybe", "No" or "Undecided"  
                Any other input value will result in a "400: Bad Request" response. 
                These values are also case-sensitive.
            parameters:
              - name: studentId
                required: true
                in: path
                schema:
                    type: integer
                    format: int64
            responses:
                '204':
                    description: |
                        The response if there is a student in the database with the given id.
                '404':
                    description: |
                        The response if there is no student in the database with the given id.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Status"
    /projects:
        get:
            summary: Get list containing all Project objects
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Project'
        post:
            summary: Add new project
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Project'
            responses:
                '200': 
                    description: successful operation
    /projects/{projectId}:
        get:
            summary: Get Project by id
            parameters:
              - name: projectId
                required: true
                in: path
                schema:
                    type: integer
                    format: int64
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Project'
        delete:
            summary: Remove project by id
            parameters:
              - name: projectId
                required: true
                in: path
                schema:
                    type: integer
                    format: int64
            responses:
                '200':
                    description: successful operation
    /projects/{projectId}/students:
        get:
            summary: Get all students from a project
            parameters: 
              - name: projectId
                required: true
                in: path
                schema:
                    type: integer
                    format: int64
            responses:
                '200':
                    description: successful operation
        post:
            summary: Draft student for project
            parameters:
              - name: projectId
                required: true
                in: path
                schema:
                    type: integer
                    format: int64
            requestBody:
                content:
                    application/json:
                        schema:
                            description: studentId
                            type: integer
                            format: int64
            responses:
                '200':
                    description: successful operation
    /projects/{projectId}/students/{studentId}:
        delete:
            summary: Remove student from project
            parameters:
              - name: projectId
                required: true
                in: path
                schema:
                    type: integer
                    format: int64
              - name: studentId
                required: true
                in: path
                schema:
                    type: integer
                    format: int64
            responses:
                '200':
                    description: successful operation
    /projects/{projectId}/coaches:
        post:
            summary: Assign a coach to project
            parameters:
              - name: projectId
                required: true
                in: path
                schema:
                    type: integer
                    format: int64
            responses:
                '200':
                    description: successful operation
    /projects/{projectId}/coaches/{coachId}:
        delete:
            summary: Remove a coach from a project
            parameters:
              - name: projectId
                required: true
                in: path
                schema:
                    type: integer
                    format: int64
              - name: coachId
                required: true
                in: path
                schema:
                    type: integer
                    format: int64
            responses:
                '200':
                    description: successful operation
    /projects/conflicts:
        get:
            summary: Get student assignment conflicts
            responses:
                '200':
                    description: successful operation
    /communications/{studentId}:
        get:
            summary: Get all registered communications with a student
            description:  |
                    Returns all communications that belongs to the student with the corresponding student id.
                    If no such student exists, returns a "404: Not Found" message instead.
            parameters:
              - name: studentId
                required: true
                in: path
                schema:
                    type: integer
                    format: int64
            responses:
                '200':
                    description: |
                        The response if there is a student in the database with the given id.
                        Returns the array of communications in the response body.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Communication'
                '404':
                    description: |
                        The response if there is no student in the database with the given id.
        post:
            summary: Add a new communication with a student
            description: |
                Add a communication to the database.
                The reference for this communication is returned.
            parameters:
              - name: studentId
                required: true
                in: path
                schema:
                    type: integer
                    format: int64
              - name: Communication
                required: true
                in: requestBody
                schema:
                    $ref: '#/components/schemas/Communication'
            responses:
                '201':
                    description: | 
                        Successful operation. Return a link the newly added 
                        communication in the location header.
                    content:
                        application/json:
                            schema:
                                type: string
                                format: path
    /users:
        get:
            summary: Get list containing all users
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
        post:
            summary: add new user to database
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
            responses:
                '201':
                    description: CREATED
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
    /users/{userId}:
        get:
            summary: get User by id
            parameters:
                - name: userId
                  required: true
                  in: path
                  schema:
                    type: string
                    format: uuid
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '404':
                    description: NOT FOUND
        patch:
            summary: update User by id
            parameters:
                - name: userId
                  required: true
                  in: path
                  schema:
                    type: string
                    format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '400':
                    description: BAD REQUEST
                '404':
                    description: NOT FOUND
        delete:
            summary: delete user by id
            parameters:
                - name: userId
                  required: true
                  in: path
                  schema:
                    type: string
                    format: uuid
            responses:
                '200':
                    description: OK
                '404':
                    description: NOT FOUND
    /users/{userId}/role:
        post:
            summary: change role of user
            parameters:
                - name: userId
                  required: true
                  in: path
                  schema:
                    type: string
                    format: uuid            
            requestBody:
                content:
                    application/json:
                        schema:
                            type: string
                            enum: [disabled, coach, admin]
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '404':
                    description: NOT FOUND                    
components:
    schemas:
        Student:
            type: object
            required:
                - id
                - firstName
                - lastName
                - status
                - statusSuggestions
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                firstName:
                    type: string
                lastName:
                    type: string
                status:
                    readOnly: true
                    allOf:
                      - $ref: '#/components/schemas/Status'
                statusSuggestions:
                    readOnly: true
                    type: array
                    items:
                        $ref: '#/components/schemas/StatusSuggestion'
        Project:
            type: object
            required:
                - id
                - name
                - desc
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                name:
                    type: string
                desc:
                    type: string
        Communication:
            type: object
            required:
                - id
                - message
                - type
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                message:
                    type: string
                type:
                    allOf:
                      - $ref: '#/components/schemas/Type'
        User:
            type: object
            required:
                - id
                - name
                - email
                - password
                - role
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                name:
                    type: string
                email:
                    type: string
                role:
                    type: string
                    enum: [disabled, coach, admin]
                password:
                    type: string
                    format: bcrypt
        Status:
            type: string
            enum: [Yes, Maybe, No, Undecided]
        StatusSuggestion:
            type: object
            required:
                - id
                - status
                - motivation
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                status:
                    type: string
                    enum: [Yes, Maybe, No]
                motivation:
                    type: string
        Type:
            type: string
            enum: [Email]

    securitySchemes:
        BasicAuth:
            type: http
            scheme: basic
security:
  - BasicAuth: []
