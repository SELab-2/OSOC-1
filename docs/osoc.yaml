openapi: 3.0.0
info:
    version: '1.0.0'
    title: 'OSOC'
    license:
        name: MIT
servers:
    -   url: 'http://localhost:8080/api'
paths:
    /editions/active:
        get:
            summary: Get the active edition or null
            description: |
                Returns the currently active edition,
                or null if there is no active edition.
            responses:
                200:
                    description: Successful operation
                    content:
                        application/json:
                            schema:
                                type: string
                                nullable: true
                                default: edition name
    /editions/inactive:
        get:
            summary: Get all inactive editions
            description: Returns all editions that are currently inactive
            responses:
                200:
                    description: Successful operation
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                                    default: edition name
    /{edition}/activate:
        post:
            parameters:
                -   in: path
                    name: edition
                    schema:
                        type: string
            summary: Activate the given edition
            description: |
                Activate the given edition, making it the active edition.
                If this edition does not exist yet, it will be automatically created.
                There can only be one active edition at a time.
                All endpoints can be used on active editions.
            responses:
                200:
                    description: Successful operation
                400:
                    description: The edition is already active
                403:
                    description: There is another active edition
    /{edition}/inactivate:
        post:
            parameters:
                -   in: path
                    name: edition
                    schema:
                        type: string
            summary: Inactivate the given edition
            description: |
                Inactivate the given active edition.
                If this edition does not exist yet, it will be automatically created.
                Only GET and DELETE endpoints can be used on active editions,
                and only by users with Admin permissions.
            responses:
                200:
                    description: Successful operation
                400:
                    description: The edition is already inactive
    /{edition}:
        get:
            parameters:
                -   in: path
                    name: edition
                    schema:
                        type: string
            summary: Get the given edition
            description: |
                Returns the Edition object with the given edition name, 
                or a 404 (NOT FOUND) if there is no such Edition.
            responses:
                200:
                    description: Successful operation
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    name:
                                        type: string
                                    isActive:
                                        type: boolean
                404:
                    description: The edition does not exist
        delete:
            parameters:
                -   in: path
                    name: edition
                    schema:
                        type: string
            summary: Delete the given edition
            description: |
                Deletes the given edition from the database.
                If this edition does not exist, returns a 404 (NOT FOUND) instead.
            responses:
                204:
                    description: Successful operation
                404:
                    description: The edition does not exist
    /{edition}/students:
        get:
            parameters:
                -   in: path
                    name: edition
                    schema:
                        type: string
                -   in: query
                    name: pageNumber
                    schema:
                        type: integer
                    description: The page number for pagination, using offset pagination (see https://developer.box.com/guides/api-calls/pagination/offset-based/)
                -   in: query
                    name: pageSize
                    schema:
                        type: integer
                    description: The page size for pagination. For example, if you pass 50 as value, there will be 50 students on one page
                -   in: query
                    name: sortBy
                    schema:
                        type: string
                    description: The parameter to sort by. Sorting can be done on any parameter.
                        The id, firstName and lastName fields are sorted alphabetically.
                        Sorting on the status field will first return students with a Yes status, then Maybe, No and finally Undecided.
                        Sorting on other parameters is nonsensical. Ties are broken randomly.
                -   in: query
                    name: name
                    schema:
                        type: string
                    description: Part of a name of a student that you want to filter on (this string will be made lowercase and spaces will be removed, this is done to more easily get matches).
                -   in: query
                    name: status
                    schema:
                        type: array
                        items:
                            $ref: '#/components/schemas/Status'
                    description: Status to filter on, only students that have one of the given statuses will be shown (default value is all statuses).
                -   in: query
                    name: includeSuggested
                    schema:
                        type: boolean
                    description: Whether or not to include students you have already added a suggestion for (default value is true)
            summary: Get a list containing all Student objects
            description: Get a list of all students in the database. This request cannot fail.
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Student'
        post:
            parameters:
                -   in: path
                    name: edition
                    schema:
                        type: string
            summary: Add a new student to the database
            description: |
                Add a student to the database. The created student object is returned.
                Note that no checking is done to see if firstName or lastName qualify as valid 'names',
                this verification is the responsibility of the caller.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TallyForm'
            responses:
                '201':
                    description: Successful operation.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Student'
                    headers:
                        Location:
                            description: url to the newly created student object
                            schema:
                                type: string
                                format: url
                '400':
                    description: Bad Request.
    /{edition}/students/{studentId}:
        get:
            summary: Get Student by id
            description: |
                Returns the student with the corresponding id. If no such student exists,
                returns a "404: Not Found" message instead.
            parameters:
                -   in: path
                    name: edition
                    schema:
                        type: string
                -   name: studentId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '200':
                    description: |
                        The response if there is a student in the database with the given id.
                        Returns the student in the response body.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Student'
                '404':
                    description: |
                        The response if there is no student in the database with the given id.
        delete:
            summary: Delete Student by id
            description: |
                Deletes the student with the corresponding id. If no such student exists,
                returns a "404: Not Found" message instead.
            parameters:
                -   name: studentId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '204':
                    description: |
                        The response if there was a student in the database with the given id.
                '404':
                    description: |
                        The response if there is no student in the database with the given id.
    /{edition}/students/{studentId}/suggestions:
        post:
            summary: Suggest student status
            description: |
                Add a statusSuggestion to the student with the given id. If no such student exists,
                returns a "404: Not Found" message instead. 
                Note that the status value can only be "Yes", "Maybe" or "No" (this is case-sensitive).
                Any other value will result in a "400: Bad Request" response.
                Importantly this includes the "Undecided" value. This is because it's not allowed
                to suggest to change a student's status to Undecided.
            parameters:
                -   in: path
                    name: edition
                    schema:
                        type: string
                -   name: studentId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/StatusSuggestion"
            responses:
                '204':
                    description: |
                        The response if there is a student in the database with the given id.
                '401':
                    description: |
                        The response if the currently authenticated user doesn't match the coachId specified in the StatusSuggestion
                '404':
                    description: |
                        The response if there is no student in the database with the given id.
    /{edition}/students/{studentId}/suggestions/{coachId}:
        delete:
            summary: Delete student status suggestion
            description: |
                Deletes the statusSuggestion made by the coach identified by the given coachId 
                from the student with the given studentId. If either the student or the suggestion doesn't exist,
                the method returns a "404: Not Found" message instead.
            parameters:
                -   in: path
                    name: edition
                    schema:
                        type: string
                -   name: studentId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
                -   name: coachId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '204':
                    description: |
                        The response if the suggestion was successfully deleted.
                '400':
                    description: |
                        The response if the given coach hasn't made a suggestion
                        for the given student.
                '401':
                    description: |
                        The response if the currently authenticated user attempts
                        to delete a suggestion made by another user.
                '404':
                    description: |
                        The response if the student specified by the given id
                        didn't exist in the database.
    /{edition}/students/{studentId}/status:
        post:
            summary: Set student status
            description: |
                Set the status of the student with the given id. If no such student exists,
                returns a "404: Not Found" message instead. 
                The status should be passed in the request body as a JSON string 
                and can have the following values:  
                "Yes", "Maybe", "No" or "Undecided"  
                Any other input value will result in a "400: Bad Request" response. 
                These values are also case-sensitive.
            parameters:
                -   in: path
                    name: edition
                    schema:
                        type: string
                -   name: studentId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Status"
            responses:
                '204':
                    description: |
                        The response if there is a student in the database with the given id.
                '404':
                    description: |
                        The response if there is no student in the database with the given id.
                '400':
                    description: Bad Request.
    /{edition}/projects:
        get:
            summary: Get list containing all Project objects
            parameters:
                -   in: path
                    required: true
                    name: edition
                    schema:
                        type: string
                -   in: query
                    required: true
                    name: name
                    schema:
                        type: string
                    description: |
                        Part of a name of a project that you want to filter on
                        (this string will be made lowercase and spaces will be removed).
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Project'
        post:
            summary: Create a new project. Returns the created project object.
            parameters:
                -   in: path
                    required: true
                    name: edition
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Project'
            responses:
                '201':
                    description: |
                        Successful operation.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Project'
                    headers:
                        Location:
                            description: url to the newly created project
                            schema:
                                type: string
                                format: url
                '400':
                    description: Bad Request.
    /{edition}/projects/{projectId}:
        get:
            summary: Get Project by id
            parameters:
                -   in: path
                    required: true
                    name: edition
                    schema:
                        type: string
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Project'
                '404':
                    description: Not Found. No such projectId.
        delete:
            summary: Remove project by id
            parameters:
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '204':
                    description: successful operation
                '404':
                    description: Not Found. No such projectId.
    /{edition}/projects/{projectId}/students:
        get:
            summary: Get all students from a project
            parameters:
                -   in: path
                    required: true
                    name: edition
                    schema:
                        type: string
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Student'
                '404':
                    description: Not Found. No such projectId.
        post:
            summary: Draft student for project
            parameters:
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            description: studentId
                            type: string
                            format: uuid
            responses:
                '204':
                    description: successful operation
                '404':
                    description: Not Found. No such projectId.
                '400':
                    description: Bad Request.
    /{edition}/projects/{projectId}/students/{studentId}:
        delete:
            summary: Remove student from project
            parameters:
                -   in: path
                    required: true
                    name: edition
                    schema:
                        type: string
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
                -   name: studentId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '204':
                    description: successful operation
                '404':
                    description: Not Found. No such projectId or studentId.
    /{edition}/projects/{projectId}/coaches:
        post:
            summary: Assign a coach to project
            parameters:
                -   in: path
                    required: true
                    name: edition
                    schema:
                        type: string
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            description: coachId
                            type: string
                            format: uuid
            responses:
                '204':
                    description: successful operation
                '404':
                    description: No such projectId or coachId.
                '400':
                    description: Bad Request.
    /{edition}/projects/{projectId}/coaches/{coachId}:
        delete:
            summary: Remove a coach from a project
            parameters:
                -   in: path
                    required: true
                    name: edition
                    schema:
                        type: string
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
                -   name: coachId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '204':
                    description: successful operation
                '404':
                    description: Not Found. No such projectId or coachId.
    /{edition}/projects/{projectId}/devroles:
        post:
            summary: Add a new student developer role to a project
            parameters:
                -   in: path
                    required: true
                    name: edition
                    schema:
                        type: string
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Position'
            responses:
                '201':
                    description: succesful operation
                '404':
                    description: Not Found. No such projectId.
                '400':
                    description: Bad Request.
    /{edition}/projects/{projectId}/devroles/{devroleId}:
        delete:
            summary: Remove a student developer role from a project
            parameters:
                -   in: path
                    required: true
                    name: edition
                    schema:
                        type: string
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
                -   name: devroleId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '204':
                    description: succesful operation
                '404':
                    description: Not Found. No such projectId or devroleId.
    /{edition}/projects/{projectId}/assignments:
        post:
            summary: Add a new student developer assignment
            parameters:
                -   in: path
                    required: true
                    name: edition
                    schema:
                        type: string
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Assignment'
            responses:
                '200':
                    description: succesful operation
                '404':
                    description: Not Found. No such projectId.
                '400':
                    description: Bad Request.
    /{edition}/projects/{projectId}/assignments/{assignmentId}:
        delete:
            summary: Remove a student developer assignment from a project
            parameters:
                -   in: path
                    required: true
                    name: edition
                    schema:
                        type: string
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
                -   name: assignmentId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '204':
                    description: succesful operation
                '404':
                    description: Not Found. No such projectId or assignmentId.
    /{edition}/projects/conflicts:
        get:
            summary: Get all project-conflicts (a conflict occurs when a student is assigned to multiple projects at the same time)
            parameters:
                -   in: path
                    required: true
                    name: edition
                    schema:
                        type: string
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Conflict'
                            example:
                                student: "https://example.com/api/students/abb97568-ac54-11ec-b909-0242ac120002"
                                projects: ["https://example.com/api/projects/afc1e1cc-ac54-11ec-b909-0242ac120002", "https://example.com/api/projects/b6a81d12-ac54-11ec-b909-0242ac120002" ]
    /studentRoles:
        get:
            summary: Get all types of student Roles that are currently in the database.
            responses:
                '200':
                    description: |
                        Returns an array all different types of student dev roles that 
                        are currently present in the database.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Position'
        post:
            summary: Add a new student dev role
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Position'
            responses:
                '201':
                    description: |
                        Successful operation. Returns a link to the newly added 
                        student role in the location header.
                '400':
                    description: Bad Request.
    /studentRoles/{studentRoleId}:
        get:
            summary: Get a specific student role by id.
            parameters:
                -   name: studentRoleId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '200':
                    description: |
                        Return the corresponding StudentRole
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Position'
                '404':
                    description: |
                        Not Found. No such StudentRoleId.
        delete:
            summary: Remove a specific student role by id.
            parameters:
                -   name: studentRoleId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '204':
                    description: |
                        Succesful operation.
                '404':
                    description: |
                        Not Found. No such StudentRoleId.
    /communications/{communicationId}:
        get:
            summary: Get Communications by id
            description: |
                Returns the communication with the corresponding  id.
                If no such communication exists,
                returns a "404: Not Found" message instead.
            parameters:
                -   name: communicationId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '200':
                    description: |
                        The response if there is a communication in the database with the given id.
                        Returns the communication in the response body.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Communication'
                '404':
                    description: |
                        The response if there is no communication in the database with the given id.
    /communications/{studentId}:
        post:
            summary: Add a new communication with a student
            description: |
                Add a communication to the database.
                The created communication object is returned.
            parameters:
                -   name: studentId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Communication'
            responses:
                '201':
                    description: Successful operation.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Communication'
                    headers:
                        Location:
                            description: url to the newly created communication
                            schema:
                                type: string
                                format: url
                '404':
                    description: |
                        The response if there is no student in the database with the given student id.
    /users:
        get:
            summary: Get list containing all users
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
        post:
            summary: Add a new user to database
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
            responses:
                '201':
                    description: Succesful operation.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                    headers:
                        Location:
                            description: url to the newly created User
                            schema:
                                type: string
                                format: url
    /users/{userId}:
        get:
            summary: get User by id
            parameters:
                -   name: userId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '404':
                    description: Not Found. No such userId.
        patch:
            summary: update User by id
            parameters:
                -   name: userId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                    headers:
                        Location:
                            schema:
                                description: url to the updated User.
                                type: string
                                format: url

                '400':
                    description: BAD REQUEST
                '404':
                    description: NOT FOUND
        delete:
            summary: delete user by id
            parameters:
                -   name: userId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '204':
                    description: OK
                '404':
                    description: NOT FOUND
    /users/{userId}/role:
        post:
            summary: change role of user
            parameters:
                -   name: userId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            type: string
                            enum: [ Disabled, Coach, Admin ]
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '404':
                    description: NOT FOUND
                '400':
                    description: Bad Request.
    /assignments/{assignmentId}:
        get:
            summary: Get Assignment by id
            description: |
                Returns the assignment with the corresponding id. If no such assignment exists,
                returns a "404: Not Found" message instead.
            parameters:
              - name: assignmentId
                required: true
                in: path
                schema:
                    type: string
                    format: uuid
            responses:
                '200':
                    description: |
                        The response if there is a assignment in the database with the given id.
                        Returns the assignment in the response body.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Assignment'
                '404':
                    description: |
                        The response if there is no assignment in the database with the given id.
    /positions/{positionId}:
        get:
            summary: Get Position by id
            description: |
                Returns the position with the corresponding id. If no such position exists,
                returns a "404: Not Found" message instead.
            parameters:
              - name: positionId
                required: true
                in: path
                schema:
                    type: string
                    format: uuid
            responses:
                '200':
                    description: |
                        The response if there is a position in the database with the given id.
                        Returns the position in the response body.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Position'
                '404':
                    description: |
                        The response if there is no position in the database with the given id.
    /statusSuggestions/{statusSuggestionId}:
        get:
            summary: Get StatusSuggestions by id
            description: |
                Returns the statusSuggestion with the corresponding id. If no such statusSuggestion exists,
                returns a "404: Not Found" message instead.
            parameters:
              - name: statusSuggestionId
                required: true
                in: path
                schema:
                    type: string
                    format: uuid
            responses:
                '200':
                    description: |
                        The response if there is a statusSuggestion in the database with the given id.
                        Returns the statusSuggestion in the response body.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StatusSuggestion'
                '404':
                    description: |
                        The response if there is no statusSuggestion in the database with the given id.
    /answers/{answerId}:
        get:
            summary: Get Answer by id
            description: |
                Returns the Answer with the corresponding id. If no such Answer exists,
                returns a "404: Not Found" message instead.
            parameters:
              - name: answerId
                required: true
                in: path
                schema:
                  type: string
                  format: uuid
            responses:
              '200':
                description: |
                  The response if there is an answer in the database with the given id.
                  Returns the Answer in the response body.
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Answer'
              '404':
                description: |
                  The response if there is no Answer in the database with the given id.

    /login:
        post:
            summary: login to the user with the correct email and password
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                password:
                                    type: string
            responses:
                '200':
                    description: Successful operation.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    accessToken:
                                        type: string
                                    refreshToken:
                                        type: string
                                    accessTokenTTL:
                                        type: integer
                                        format: date
                                    user:
                                        $ref: '#/components/schemas/User'
                '401':
                    description: |
                        The response if authorization has failed.
    /token/refresh:
        post:
            summary: renew access token using refresh token
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        schema:
                            type: object
                            properties:
                                refreshToken:
                                    type: string
                            required:
                                - refreshToken
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    accessToken:
                                        type: string
                                    refreshToken:
                                        type: string
                '400':
                    description: Bad Request.
components:
    schemas:
        Student:
            type: object
            required:
                - id
                - firstname
                - lastname
                - skills
                - alumn
                - answers
                - status
                - statusSuggestions
                - communications
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                firstName:
                    type: string
                    example: "John"
                lastName:
                    type: stringexample: "Doe"
                status:
                    readOnly: true
                    allOf:
                        -   $ref: '#/components/schemas/Status'
                statusSuggestions:
                    readOnly: true
                    type: array
                    items:
                        type: string
                        format: 'https://example.com/api/statusSuggestions/{statusSuggestionId}'
                        example: 'https://example.com/api/statusSuggestions/6ea082fd-b0f2-4ec6-a05c-6a4e4a02e4eb'
                communications:
                    readOnly: true
                    type: array
                    items:
                        type: string
                        format: 'https://example.com/api/communications/{communicationId}'
                        example: 'https://example.com/api/communications/f9cdd786-d6a8-4f34-a796-4d55b099f785'
                alumn:
                    type: boolean
                    default: false
                answers:
                    type: array
                    items:
                      type: string
                      format: 'https://example.com/api/answers/{answerId}'
                      example: 'https://example.com/api/answers/f7b77e33-e69b-4743-a97e-b21acf542e50'
                skills:
                    type: array
                    items:
                        $ref: '#/components/schemas/Skill'
        Answer:
          type: object
          properties:
            id:
              type: string
              format: uuid
            key:
              type: string
              example: "question_3X4q1V"
            question:
              type: string
              example: "Which role are you applying for?"
            answer:
              type: array
              items:
                type: string
              example: [ "Front-end Developer", "Back-end Developer" ]
        TallyForm:
          type: object
          required:
            - data
          properties:
            data:
              type: object
              properties:
                fields:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        example: "question_3X4q1V"
                      label:
                        type: string
                        example: "Which role are you applying for?"
                      "type":
                        type: string
                        example: "CHECKBOXES"
                      value:
                        type: object
                        example: ["19b68be9-6c2b-41f8-95f6-439cfb20f792"]
                      options:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            text:
                              type: string
                        example:
                          [
                            {
                              "id": "2fd881eb-68de-4012-988d-7957de663c4f",
                              "text": "Front-end developer"
                            },
                            {
                              "id": "19b68be9-6c2b-41f8-95f6-439cfb20f792",
                              "text": "Back-end developer"
                            },
                            {
                              "id": "d27de5b9-3370-44e6-b114-60ddc243a4d8",
                              "text": "UX / UI designer"
                            },
                            {
                              "id": "eb4b0022-4673-4f96-9c15-c01d870a253f",
                              "text": "Graphic designer"
                            },
                            {
                              "id": "f812f2d5-b438-49f4-9d95-0b415add300f",
                              "text": "Business Modeller"
                            },
                            {
                              "id": "3f34960d-1248-49ca-b6c7-fed702c73979",
                              "text": "Storyteller"
                            },
                            {
                              "id": "9bcb7761-3c86-4ea2-8abc-d45187a007ee",
                              "text": "Marketer"
                            },
                            {
                              "id": "5df0feb4-87ce-4767-bf99-092c27bc9b24",
                              "text": "Copywriter"
                            },
                            {
                              "id": "ee956527-6f34-479e-89a8-feb5e73d8979",
                              "text": "Video editor"
                            },
                            {
                              "id": "aa26de30-7ec2-4255-a949-0e5388dd58be",
                              "text": "Photographer"
                            },
                            {
                              "id": "ce472fdf-723c-4b94-bcad-a9136d0d8443",
                              "text": "Other"
                            }
                          ]
        Project:
            type: object
            required:
                - id
                - name
                - clientName
                - description
                - coaches
                - positions
                - assignments
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                name:
                    type: string
                clientName:
                    type: string # Later on this could be a different schema if clients need to be saved in the database
                description:
                    type: string
                coaches:
                    type: array
                    items:
                        type: string
                        format: 'https://example.com/api/users/{coachId}'
                positions:
                    type: array
                    items:
                        type: string
                        format: 'https://example.com/api/positions/{positionId}'
                assignments:
                    type: array
                    items:
                        type: string
                        format: 'https://example.com/api/assignments/{assignmentId}'
        Communication:
            type: object
            required:
                - id
                - message
                - type
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                message:
                    type: string
                type:
                    allOf:
                        -   $ref: '#/components/schemas/CommunicationType'
        User:
            type: object
            required:
                - id
                - username
                - email
                - password
                - role
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                username:
                    type: string
                email:
                    type: string
                role:
                    type: string
                    enum: [ Disabled, Coach, Admin ]
                password:
                    type: string
                    format: bcrypt
        Status:
            type: string
            enum: [ Yes, Maybe, No, Undecided ]
        StatusSuggestion:
            type: object
            required:
                - coachId
                - status
                - motivation
            properties:
                coachId:
                    type: string
                    format: uuid
                status:
                    type: string
                    enum: [ Yes, Maybe, No ]
                motivation:
                    type: string
        Skill:
          type: object
          required:
              - skillName
          properties:
              skillName:
                  type: string
                  example: "Back-end developer"
        Position:
            type: object
            required:
                - id
                - skill
                - amount
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                skill:
                    $ref: '#/components/schemas/Skill'
                amount:
                    type: integer
        Assignment:
            type: object
            required:
                - id
                - student
                - position
                - suggester
                - reason
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                student:
                    type: string
                    format: 'https://example.com/api/students/{studentId}'
                position:
                    type: string
                    format: 'https://example.com/api/positions/{positionId}'
                suggester:
                    type: string
                    format: 'https://example.com/api/users/{suggesterId}'
                reason:
                    type: string
        CommunicationType:
            type: string
            enum: [ Email ]
        Conflict:
            type: object
            required:
                - student
                - projects
            properties:
                student:
                    type: string
                    format: uuid
                projects:
                    type: array
                    items:
                        type: string
                        format: uuid
    securitySchemes:
        BasicAuth:
            type: http
            scheme: basic
security:
    -   BasicAuth: [ ]
