openapi: 3.0.0
info:
    version: '1.0.0'
    title: 'OSOC'
    license:
        name: MIT
servers:
  - url: 'localhost:3000'
paths:
    /students:
        get:
            summary: Get a list containing all Student objects
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Student'
        post:
            summary: Add a new student to the database
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Student'
            responses:
                '201':
                    description: successful operation
                    headers:
                        Location:
                            schema:
                                description: url to the newly created student object
                                type: string
                                format: url
                '400':
                    description: Bad Request. Content contains invalid user or user already exists.
    /students/{studentId}:
        get:
            summary: Get Student by id
            parameters:
              - name: studentId
                required: true
                in: path
                schema:
                    type: string
                    format: uuid
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Student'
                '404':
                    description: Not Found. No such studentId.
        delete:
            summary: Delete Student by id
            parameters:
              - name: studentId
                required: true
                in: path
                schema:
                    type: string
                    format: uuid
            responses:
                '204':
                    description: successful operation
                '404':
                    description: Not Found. No such studentId.
    /students/{studentId}/suggestions:
        post:
            summary: Suggest student status
            parameters:
              - name: studentId
                required: true
                in: path
                schema:
                    type: string
                    format: uuid
            requestBody:
                content:
                  application/json:
                    schema:
                        type: string
                        enum: [Yes, No, Maybe]
            responses:
                '204':
                    description: successful operation
                '404':
                    description: Not Found. No such studentId.
                '400':
                    description: Bad Request.
    /students/{studentId}/status:
        post:
            summary: Set student status
            parameters:
              - name: studentId
                required: true
                in: path
                schema:
                    type: string
                    format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            type: string
                            enum: [Yes, No, Maybe, Undecided]
            responses:
                '204':
                    description: successful operation
                '404':
                    description: Not Found. No such studentId.
                '400':
                    description: Bad Request.
    /projects:
        get:
            summary: Get list containing all Project objects
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Project'
        post:
            summary: Add new project
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Project'
            responses:
                '201': 
                    description: successful operation
                    headers:
                        Location:
                            schema:
                                description: url to the newly created project
                                type: string
                                format: url
                '400':
                    description: Bad Request.
    /projects/{projectId}:
        get:
            summary: Get Project by id
            parameters:
              - name: projectId
                required: true
                in: path
                schema:
                    type: string
                    format: uuid
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Project'
                '404':
                    description: Not Found. No such projectId.
        delete:
            summary: Remove project by id
            parameters:
              - name: projectId
                required: true
                in: path
                schema:
                    type: string
                    format: uuid
            responses:
                '204':
                    description: successful operation
                '404':
                    description: Not Found. No such projectId.                
    /projects/{projectId}/students:
        get:
            summary: Get all students from a project
            parameters: 
              - name: projectId
                required: true
                in: path
                schema:
                    type: string
                    format: uuid
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Student'
                '404':
                    description: Not Found. No such projectId. 
        post:
            summary: Draft student for project
            parameters:
              - name: projectId
                required: true
                in: path
                schema:
                    type: string
                    format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            description: studentId
                            type: string
                            format: uuid
            responses:
                '204':
                    description: successful operation
                '404':
                    description: Not Found. No such projectId.
                '400':
                    description: Bad Request.
    /projects/{projectId}/students/{studentId}:
        delete:
            summary: Remove student from project
            parameters:
              - name: projectId
                required: true
                in: path
                schema:
                    type: string
                    format: uuid
              - name: studentId
                required: true
                in: path
                schema:
                    type: string
                    format: uuid
            responses:
                '204':
                    description: successful operation
                '404':
                    description: Not Found. No such projectId or studentId.
    /projects/{projectId}/coaches:
        post:
            summary: Assign a coach to project
            parameters:
              - name: projectId
                required: true
                in: path
                schema:
                    type: string
                    format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            description: coachId
                            type: string
                            format: uuid
            responses:
                '204':
                    description: successful operation
                '404':
                    description: No such projectId.
                '400':
                    description: Bad Request.
    /projects/{projectId}/coaches/{coachId}:
        delete:
            summary: Remove a coach from a project
            parameters:
              - name: projectId
                required: true
                in: path
                schema:
                    type: string
                    format: uuid
              - name: coachId
                required: true
                in: path
                schema:
                    type: string
                    format: uuid
            responses:
                '204':
                    description: successful operation
                '404':
                    description: Not Found. No such projectId or coachId.
    /projects/{projectId}/devroles:
        post:
            summary: Add a new student developer role to a project
            parameters:
                - name: projectId
                  required: true
                  in: path
                  schema:
                    type: string
                    format: uuid
            requestBody:
                content:
                  application/json:
                    schema:
                        $ref: '#/components/schemas/StudentRole'
            responses:
                '201':
                    description: succesful operation
                '404':
                    description: Not Found. No such projectId.
                '400':
                    description: Bad Request.
    /projects/{projectId}/devroles/{devroleId}:
        delete:
            summary: Remove a student developer role from a project
            parameters:
                - name: projectId
                  required: true
                  in: path
                  schema:
                    type: string
                    format: uuid
                - name: devroleId
                  required: true
                  in: path
                  schema:
                    type: string
                    format: uuid
            responses:
                '204':
                    description: succesful operation
                '404':
                    description: Not Found. No such projectId or devroleId.
    /projects/{projectId}/assignments:
        post:
            summary: Add a new student developer assignment
            parameters:
                - name: projectId
                  required: true
                  in: path
                  schema:
                    type: string
                    format: uuid
            requestBody:
                content:
                  application/json:
                    schema:
                        $ref: '#/components/schemas/StudentAssignment'
            responses:
                '200':
                    description: succesful operation
                '404':
                    description: Not Found. No such projectId.
                '400':
                    description: Bad Request.
    /projects/{projectId}/assignments/{assignmentId}:
        delete:
            summary: Remove a student developer assignment from a project
            parameters:
                - name: projectId
                  required: true
                  in: path
                  schema:
                    type: string
                    format: uuid
                - name: assignmentId
                  required: true
                  in: path
                  schema:
                    type: string
                    format: uuid
            responses:
                '204':
                    description: succesful operation
                '404':
                    description: Not Found. No such projectId or assignmentId.
    /communications/{studentId}:
        get:
            summary: Get all registered communications with a student
            parameters:
              - name: studentId
                required: true
                in: path
                schema:
                    type: string
                    format: uuid
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema: 
                                type: array
                                items:
                                    type: string
                '404':
                    description: Not Found. No such studentId.
        post:
            summary: Register communication with a student
            parameters:
              - name: studentId
                required: true
                in: path
                schema:
                    type: string
                    format: uuid
            requestBody:
                content:
                  application/json:
                    schema: 
                        type: string
            responses:
                '201':
                    description: successful operation
                '404':
                    description: Not Found. No such studentId.
    /users:
        get:
            summary: Get list containing all users
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
        post:
            summary: add new user to database
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
            responses:
                '201':
                    description: succesful operation
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                    headers:
                        Location:
                            schema: 
                                description: url to the newly created User
                                type: string
                                format: url
    /users/{userId}:
        get:
            summary: get User by id
            parameters:
                - name: userId
                  required: true
                  in: path
                  schema:
                    type: string
                    format: uuid
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '404':
                    description: Not Found. No such userId.
        patch:
            summary: update User by id
            parameters:
                - name: userId
                  required: true
                  in: path
                  schema:
                    type: string
                    format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                    headers:
                        Location:
                            schema: 
                                description: url to the updated User.
                                type: string
                                format: url

                '400':
                    description: BAD REQUEST
                '404':
                    description: NOT FOUND
        delete:
            summary: delete user by id
            parameters:
                - name: userId
                  required: true
                  in: path
                  schema:
                    type: string
                    format: uuid
            responses:
                '204':
                    description: OK
                '404':
                    description: NOT FOUND
    /users/{userId}/role:
        post:
            summary: change role of user
            parameters:
                - name: userId
                  required: true
                  in: path
                  schema:
                    type: string
                    format: uuid            
            requestBody:
                content:
                    application/json:
                        schema:
                            type: string
                            enum: [disabled, coach, admin]
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '404':
                    description: NOT FOUND
                '400':
                    description: Bad Request.                
components:
    schemas:
        Student:
            type: object
            required:
                - id
                - firstname
                - lastname
                - alumn
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                firstname:
                    type: string
                lastname:
                    type: string
                alumn:
                    type: boolean
                    default: false
        Project:
            type: object
            required:
                - id
                - name
                - client
                - coaches
                - desc
                - studentRoles
                - studentAssignments
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                name:
                    type: string
                client:
                    type: string # Later on this could be a different schema if clients need to be saved in the database
                coaches:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
                desc:
                    type: string
                studentRoles:
                    type: array
                    items:
                        $ref: '#/components/schemas/StudentRole'
        User:
            type: object
            required:
                - id
                - name
                - email
                - password
                - role
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                name:
                    type: string
                email:
                    type: string
                role:
                    type: string
                    enum: [disabled, coach, admin]
                password:
                    type: string
                    format: bcrypt
        StudentRole:
            type: object
            required:
                - id
                - title
                - amount
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                title:
                    type: string
                amount:
                    type: integer
                    default: 1
                information:
                    type: string
        StudentAssignment:
            type: object
            required:
                - id
                - student
                - role
                - suggester
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                student:
                    $ref: '#/components/schemas/Student'
                role:
                    $ref: '#/components/schemas/StudentRole'
                suggester:
                    $ref: '#/components/schemas/User'
                information:
                    type: string

    securitySchemes:
        BasicAuth:
            type: http
            scheme: basic
security:
  - BasicAuth: []
