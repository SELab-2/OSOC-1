openapi: 3.0.0
info:
    version: '1.0.0'
    title: 'OSOC'
    license:
        name: MIT
servers:
    -   url: 'http://localhost:8080/api'
paths:
    /{organization}/{editionName}/students:
        get:
            parameters:
                -   in: path
                    name: organization
                    schema:
                        type: string
                -   in: path
                    name: editionName
                    schema:
                        type: string
                -   in: query
                    name: pageNumber
                    schema:
                        type: integer
                    description: The page number for pagination, using offset pagination (see https://developer.box.com/guides/api-calls/pagination/offset-based/)
                -   in: query
                    name: pageSize
                    schema:
                        type: integer
                    description: The page size for pagination. For example, if you pass 50 as value, there will be 50 students on one page
                -   in: query
                    name: sortBy
                    schema:
                        type: string
                    description: The parameter to sort by. Sorting can be done on any parameter.
                        The id, firstName and lastName fields are sorted alphabetically.
                        Sorting on the status field will first return students with a Yes status, then Maybe, No and finally Undecided.
                        Sorting on other parameters is nonsensical. Ties are broken randomly.
              - in: query
                name: name
                schema:
                  type: string
                description: Part of a name of a student that you want to filter on (this string will be made lowercase and spaces will be removed, this is done to more easily get matches).
              - in: query
                name: status
                schema:
                  type: array
                  items:
                      $ref: '#/components/schemas/Status'
                description: Status to filter on, only students that have one of the given statuses will be shown (default value is all statuses).
              - in: query
                name: includeSuggested
                schema:
                  type: boolean
                description: Whether or not to include students you have already added a suggestion for (default value is true)
            summary: Get a list containing all Student objects
            description: Get a list of all students in the database. This request cannot fail.
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Student'
        post:
            parameters:
                -   in: path
                    name: organization
                    schema:
                        type: string
                -   in: path
                    name: editionName
                    schema:
                        type: string
            summary: Add a new student to the database
            description: |
                Add a student to the database. The created student object is returned.
                Note that no checking is done to see if firstName or lastName qualify as valid 'names',
                this verification is the responsibility of the caller.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Student'
            responses:
                '201':
                    description: Successful operation.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Student'
                    headers:
                        Location:
                            description: url to the newly created student object
                            schema:
                                type: string
                                format: url
                '400':
                    description: Bad Request.
    /students/{studentId}:
        get:
            summary: Get Student by id
            description: |
                Returns the student with the corresponding id. If no such student exists,
                returns a "404: Not Found" message instead.
            parameters:
                -   name: studentId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '200':
                    description: |
                        The response if there is a student in the database with the given id.
                        Returns the student in the response body.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Student'
                '404':
                    description: |
                        The response if there is no student in the database with the given id.
        delete:
            summary: Delete Student by id
            description: |
                Deletes the student with the corresponding id. If no such student exists,
                returns a "404: Not Found" message instead.
            parameters:
                -   name: studentId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '204':
                    description: |
                        The response if there was a student in the database with the given id.
                '404':
                    description: |
                        The response if there is no student in the database with the given id.
    /students/{studentId}/suggestions:
        post:
            summary: Suggest student status
            description: |
                Add a statusSuggestion to the student with the given id. If no such student exists,
                returns a "404: Not Found" message instead. 
                Note that the status value can only be "Yes", "Maybe" or "No" (this is case-sensitive).
                Any other value will result in a "400: Bad Request" response.
                Importantly this includes the "Undecided" value. This is because it's not allowed
                to suggest to change a student's status to Undecided.
            parameters:
                -   name: studentId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/StatusSuggestion"
            responses:
                '204':
                    description: |
                        The response if there is a student in the database with the given id.
                '401':
                    description: |
                        The response if the currently authenticated user doesn't match the coachId specified in the StatusSuggestion
                '404':
                    description: |
                        The response if there is no student in the database with the given id.
    /students/{studentId}/suggestions/{coachId}:
        delete:
            summary: Delete student status suggestion
            description: |
                Deletes the statusSuggestion made by the coach identified by the given coachId 
                from the student with the given studentId. If either the student or the suggestion doesn't exist,
                the method returns a "404: Not Found" message instead.
            parameters:
                -   name: studentId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
                -   name: coachId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '204':
                    description: |
                        The response if the suggestion was successfully deleted.
                '400':
                    description: |
                        The response if the given coach hasn't made a suggestion
                        for the given student.
                '401':
                    description: |
                        The response if the currently authenticated user attempts
                        to delete a suggestion made by another user.
                '404':
                    description: |
                        The response if the student specified by the given id
                        didn't exist in the database.
    /students/{studentId}/status:
        post:
            summary: Set student status
            description: |
                Set the status of the student with the given id. If no such student exists,
                returns a "404: Not Found" message instead. 
                The status should be passed in the request body as a JSON string 
                and can have the following values:  
                "Yes", "Maybe", "No" or "Undecided"  
                Any other input value will result in a "400: Bad Request" response. 
                These values are also case-sensitive.
            parameters:
                -   name: studentId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Status"
            responses:
                '204':
                    description: |
                        The response if there is a student in the database with the given id.
                '404':
                    description: |
                        The response if there is no student in the database with the given id.
                '400':
                    description: Bad Request.
    /projects:
        get:
            summary: Get list containing all Project objects
            parameters:
              - in: query
                name: name
                schema:
                  type: string
                description: Part of a name of a project that you want to filter on (this string will be made lowercase and spaces will be removed, this is done to more easily get matches).
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Project'
        post:
            summary: Create a new project. Returns the created project object.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Project'
            responses:
                '201':
                    description: |
                        Successful operation.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Project'
                    headers:
                        Location:
                            description: url to the newly created project
                            schema:
                                type: string
                                format: url
                '400':
                    description: Bad Request.
    /projects/{projectId}:
        get:
            summary: Get Project by id
            parameters:
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Project'
                '404':
                    description: Not Found. No such projectId.
        delete:
            summary: Remove project by id
            parameters:
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '204':
                    description: successful operation
                '404':
                    description: Not Found. No such projectId.
    /projects/{projectId}/students:
        get:
            summary: Get all students from a project
            parameters:
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Student'
                '404':
                    description: Not Found. No such projectId.
        post:
            summary: Draft student for project
            parameters:
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            description: studentId
                            type: string
                            format: uuid
            responses:
                '204':
                    description: successful operation
                '404':
                    description: Not Found. No such projectId.
                '400':
                    description: Bad Request.
    /projects/{projectId}/students/{studentId}:
        delete:
            summary: Remove student from project
            parameters:
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
                -   name: studentId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '204':
                    description: successful operation
                '404':
                    description: Not Found. No such projectId or studentId.
    /projects/{projectId}/coaches:
        post:
            summary: Assign a coach to project
            parameters:
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            description: coachId
                            type: string
                            format: uuid
            responses:
                '204':
                    description: successful operation
                '404':
                    description: No such projectId or coachId.
                '400':
                    description: Bad Request.
    /projects/{projectId}/coaches/{coachId}:
        delete:
            summary: Remove a coach from a project
            parameters:
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
                -   name: coachId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '204':
                    description: successful operation
                '404':
                    description: Not Found. No such projectId or coachId.
    /projects/{projectId}/devroles:
        post:
            summary: Add a new student developer role to a project
            parameters:
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/StudentRole'
            responses:
                '201':
                    description: succesful operation
                '404':
                    description: Not Found. No such projectId.
                '400':
                    description: Bad Request.
    /projects/{projectId}/devroles/{devroleId}:
        delete:
            summary: Remove a student developer role from a project
            parameters:
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
                -   name: devroleId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '204':
                    description: succesful operation
                '404':
                    description: Not Found. No such projectId or devroleId.
    /projects/{projectId}/assignments:
        post:
            summary: Add a new student developer assignment
            parameters:
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/StudentAssignment'
            responses:
                '200':
                    description: succesful operation
                '404':
                    description: Not Found. No such projectId.
                '400':
                    description: Bad Request.
    /projects/{projectId}/assignments/{assignmentId}:
        delete:
            summary: Remove a student developer assignment from a project
            parameters:
                -   name: projectId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
                -   name: assignmentId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '204':
                    description: succesful operation
                '404':
                    description: Not Found. No such projectId or assignmentId.
    /projects/conflicts:
        get:
            summary: Get all project-conflicts (a conflict occurs when a student is assigned to multiple projects at the same time)
            responses:
                '200':
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Conflict'
                            example:
                                student: "abb97568-ac54-11ec-b909-0242ac120002"
                                projects: [ "afc1e1cc-ac54-11ec-b909-0242ac120002","b6a81d12-ac54-11ec-b909-0242ac120002" ]
    /studentRoles:
        get:
            summary: Get all types of student Roles that are currently in the database.
            responses:
                '200':
                    description: |
                        Returns an array all different types of student dev roles that 
                        are currently present in the database.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/StudentRole'
        post:
            summary: Add a new student dev role
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/StudentRole'
            responses:
                '201':
                    description: |
                        Successful operation. Returns a link to the newly added 
                        student role in the location header.
                '400':
                    description: Bad Request.
    /studentRoles/{studentRoleId}:
        get:
            summary: Get a specific student role by id.
            parameters:
                -   name: studentRoleId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '200':
                    description: |
                        Return the corresponding StudentRole
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StudentRole'
                '404':
                    description: |
                        Not Found. No such StudentRoleId.
        delete:
            summary: Remove a specific student role by id.
            parameters:
                -   name: studentRoleId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '204':
                    description: |
                        Succesful operation.
                '404':
                    description: |
                        Not Found. No such StudentRoleId.
    /communications/{studentId}:
        get:
            summary: Get all registered communications with a student
            description: |
                Returns all communications that belongs to the student with the corresponding student id.
                If no such student exists, returns a "404: Not Found" message instead.
            parameters:
                -   name: studentId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '200':
                    description: |
                        The response if there is a student in the database with the given id.
                        Returns the array of communications in the response body.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Communication'
                '404':
                    description: |
                        The response if there is no student in the database with the given id.
        post:
            summary: Add a new communication with a student
            description: |
                Add a communication to the database.
                The created communication object is returned.
            parameters:
                -   name: studentId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Communication'
            responses:
                '201':
                    description: Successful operation.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Communication'
                    headers:
                        Location:
                            description: url to the newly created communication
                            schema:
                                type: string
                                format: url
                '404':
                    description: |
                        The response if there is no student in the database with the given student id.
    /users:
        get:
            summary: Get list containing all users
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
        post:
            summary: Add a new user to database
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
            responses:
                '201':
                    description: Succesful operation.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                    headers:
                        Location:
                            description: url to the newly created User
                            schema:
                                type: string
                                format: url
    /users/{userId}:
        get:
            summary: get User by id
            parameters:
                -   name: userId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '404':
                    description: Not Found. No such userId.
        patch:
            summary: update User by id
            parameters:
                -   name: userId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                    headers:
                        Location:
                            schema:
                                description: url to the updated User.
                                type: string
                                format: url

                '400':
                    description: BAD REQUEST
                '404':
                    description: NOT FOUND
        delete:
            summary: delete user by id
            parameters:
                -   name: userId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            responses:
                '204':
                    description: OK
                '404':
                    description: NOT FOUND
    /users/{userId}/role:
        post:
            summary: change role of user
            parameters:
                -   name: userId
                    required: true
                    in: path
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            type: string
                            enum: [ Disabled, Coach, Admin ]
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '404':
                    description: NOT FOUND
                '400':
                    description: Bad Request.
    /login:
        post:
            summary: login to the user with the correct email and password
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                password:
                                    type: string
            responses:
                '200':
                    description: Successful operation.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    accessToken:
                                        type: string
                                    refreshToken:
                                        type: string
                                    accessTokenTTL:
                                        type: integer
                                        format: date
                                    user:
                                        $ref: '#/components/schemas/User'
                '401':
                    description: |
                        The response if authorization has failed.
    /token/refresh:
      post:
        summary: renew access token using refresh token
        requestBody:
          content:
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  refreshToken:
                    type: string
                required:
                  - refreshToken
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    accessToken:
                      type: string
                    refreshToken:
                      type: string
          '400':
            description: Bad Request.
components:
    schemas:
        Student:
            type: object
            required:
                - id
                - firstname
                - lastname
                - alumn
                - status
                - statusSuggestions
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                firstName:
                    type: string
                lastName:
                    type: string
                status:
                    readOnly: true
                    allOf:
                        -   $ref: '#/components/schemas/Status'
                statusSuggestions:
                    readOnly: true
                    type: array
                    items:
                        $ref: '#/components/schemas/StatusSuggestion'
                alumn:
                    type: boolean
                    default: false
        Project:
            type: object
            required:
                - id
                - name
                - client
                - coaches
                - desc
                - studentRoles
                - studentAssignments
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                name:
                    type: string
                client:
                    type: string # Later on this could be a different schema if clients need to be saved in the database
                coaches:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
                desc:
                    type: string
                studentRoles:
                    type: array
                    items:
                        $ref: '#/components/schemas/StudentRole'
        Communication:
            type: object
            required:
                - id
                - message
                - type
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                message:
                    type: string
                type:
                    allOf:
                        -   $ref: '#/components/schemas/CommunicationType'
        User:
            type: object
            required:
                - id
                - username
                - email
                - password
                - role
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                username:
                    type: string
                email:
                    type: string
                role:
                    type: string
                    enum: [ Disabled, Coach, Admin ]
                password:
                    type: string
                    format: bcrypt
        Status:
            type: string
            enum: [ Yes, Maybe, No, Undecided ]
        StatusSuggestion:
            type: object
            required:
                - coachId
                - status
                - motivation
            properties:
                coachId:
                    type: string
                    format: uuid
                status:
                    type: string
                    enum: [ Yes, Maybe, No ]
                motivation:
                    type: string
        StudentRole:
            type: object
            required:
                - id
                - title
                - amount
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                title:
                    type: string
                amount:
                    type: integer
                    default: 1
                information:
                    type: string
        StudentAssignment:
            type: object
            required:
                - id
                - student
                - role
                - suggester
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                student:
                    type: string
                    format: uuid
                role:
                    type: string
                    format: uuid
                suggester:
                    type: string
                    format: uuid
                information:
                    type: string
        CommunicationType:
            type: string
            enum: [ Email ]
        Conflict:
            type: object
            required:
                - student
                - projects
            properties:
                student:
                    type: string
                    format: uuid
                projects:
                    type: array
                    items:
                        type: string
                        format: uuid
    securitySchemes:
        BasicAuth:
            type: http
            scheme: basic
security:
    -   BasicAuth: [ ]
